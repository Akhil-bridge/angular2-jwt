{"version":3,"file":"auth0-angular-jwt.js","sources":["ng://@auth0/angular-jwt/lib/jwtoptions.token.ts","ng://@auth0/angular-jwt/lib/jwthelper.service.ts","ng://@auth0/angular-jwt/lib/jwt.interceptor.ts","ng://@auth0/angular-jwt/lib/angular-jwt.module.ts","ng://@auth0/angular-jwt/index.ts","ng://@auth0/angular-jwt/auth0-angular-jwt.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport const JWT_OPTIONS = new InjectionToken('JWT_OPTIONS');\r\n","// tslint:disable:no-bitwise\r\n\r\nimport { Injectable, Inject } from '@angular/core';\r\nimport { JWT_OPTIONS } from './jwtoptions.token';\r\n\r\n@Injectable()\r\nexport class JwtHelperService {\r\n  tokenGetter: () => string;\r\n\r\n  constructor(@Inject(JWT_OPTIONS) config = null) {\r\n    this.tokenGetter = config && config.tokenGetter || function() {};\r\n  }\r\n\r\n  public urlBase64Decode(str: string): string {\r\n    let output = str.replace(/-/g, '+').replace(/_/g, '/');\r\n    switch (output.length % 4) {\r\n      case 0: {\r\n        break;\r\n      }\r\n      case 2: {\r\n        output += '==';\r\n        break;\r\n      }\r\n      case 3: {\r\n        output += '=';\r\n        break;\r\n      }\r\n      default: {\r\n        throw new Error('Illegal base64url string!');\r\n      }\r\n    }\r\n    return this.b64DecodeUnicode(output);\r\n  }\r\n\r\n  // credits for decoder goes to https://github.com/atk\r\n  private b64decode(str: string): string {\r\n    const chars =\r\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n    let output = '';\r\n\r\n    str = String(str).replace(/=+$/, '');\r\n\r\n    if (str.length % 4 === 1) {\r\n      throw new Error(\r\n        '\\'atob\\' failed: The string to be decoded is not correctly encoded.'\r\n      );\r\n    }\r\n\r\n    for (\r\n      // initialize result and counters\r\n      let bc = 0, bs: any, buffer: any, idx = 0;\r\n      // get next character\r\n      (buffer = str.charAt(idx++));\r\n      // character found in table? initialize bit storage and add its ascii value;\r\n      ~buffer &&\r\n      (\r\n        (bs = bc % 4 ? bs * 64 + buffer : buffer),\r\n        // and if not first of each 4 characters,\r\n        // convert the first 8 bits to one ascii character\r\n        bc++ % 4\r\n      )\r\n        ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\r\n        : 0\r\n    ) {\r\n      // try to find character in table (0-63, not found => -1)\r\n      buffer = chars.indexOf(buffer);\r\n    }\r\n    return output;\r\n  }\r\n\r\n  private b64DecodeUnicode(str: any) {\r\n    return decodeURIComponent(\r\n      Array.prototype.map\r\n        .call(this.b64decode(str), (c: any) => {\r\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n        })\r\n        .join('')\r\n    );\r\n  }\r\n\r\n  public decodeToken(token: string = this.tokenGetter()): any {\r\n    if (!token || token === '') {\r\n      return null;\r\n    }\r\n\r\n    const parts = token.split('.');\r\n\r\n    if (parts.length !== 3) {\r\n      throw new Error(\r\n        'The inspected token doesn\\'t appear to be a JWT. Check to make sure it has three parts and see https://jwt.io for more.'\r\n      );\r\n    }\r\n\r\n    const decoded = this.urlBase64Decode(parts[1]);\r\n    if (!decoded) {\r\n      throw new Error('Cannot decode the token.');\r\n    }\r\n\r\n    return JSON.parse(decoded);\r\n  }\r\n\r\n  public getTokenExpirationDate(token: string = this.tokenGetter()): Date | null {\r\n    let decoded: any;\r\n    decoded = this.decodeToken(token);\r\n\r\n    if (!decoded || !decoded.hasOwnProperty('exp')) {\r\n      return null;\r\n    }\r\n\r\n    const date = new Date(0);\r\n    date.setUTCSeconds(decoded.exp);\r\n\r\n    return date;\r\n  }\r\n\r\n  public isTokenExpired(token: string = this.tokenGetter(), offsetSeconds?: number): boolean {\r\n    if (!token || token === '') {\r\n        return true;\r\n    }\r\n    const date = this.getTokenExpirationDate(token);\r\n    offsetSeconds = offsetSeconds || 0;\r\n\r\n    if (date === null) {\r\n      return false;\r\n    }\r\n\r\n    return !(date.valueOf() > new Date().valueOf() + offsetSeconds * 1000);\r\n  }\r\n}\r\n","import { Injectable, Inject } from \"@angular/core\";\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n} from \"@angular/common/http\";\r\nimport { JwtHelperService } from \"./jwthelper.service\";\r\nimport { JWT_OPTIONS } from \"./jwtoptions.token\";\r\n\r\nimport { mergeMap } from \"rxjs/operators\";\r\nimport { parse } from \"url\";\r\nimport { from, Observable } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n  tokenGetter: () => string | null | Promise<string | null>;\r\n  headerName: string;\r\n  authScheme: () => string | null | Promise<string | null>;\r\n  whitelistedDomains: Array<string | RegExp>;\r\n  blacklistedRoutes: Array<string | RegExp>;\r\n  throwNoTokenError: boolean;\r\n  skipWhenExpired: boolean;\r\n\r\n  constructor(\r\n    @Inject(JWT_OPTIONS) config: any,\r\n    public jwtHelper: JwtHelperService\r\n  ) {\r\n    this.tokenGetter = config.tokenGetter;\r\n    this.headerName = config.headerName || \"Authorization\";\r\n    this.authScheme = config.authScheme;\r\n    this.whitelistedDomains = config.whitelistedDomains || [];\r\n    this.blacklistedRoutes = config.blacklistedRoutes || [];\r\n    this.throwNoTokenError = config.throwNoTokenError || false;\r\n    this.skipWhenExpired = config.skipWhenExpired;\r\n  }\r\n\r\n  isWhitelistedDomain(request: HttpRequest<any>): boolean {\r\n    const requestUrl: any = parse(request.url, false, true);\r\n\r\n    return (\r\n      requestUrl.hostname === null ||\r\n      this.whitelistedDomains.findIndex((domain) =>\r\n        typeof domain === \"string\"\r\n          ? domain === requestUrl.hostname\r\n          : domain instanceof RegExp\r\n          ? domain.test(requestUrl.hostname)\r\n          : false\r\n      ) > -1\r\n    );\r\n  }\r\n\r\n  isBlacklistedRoute(request: HttpRequest<any>): boolean {\r\n    const requestedUrl = parse(request.url, false, true);\r\n\r\n    return (\r\n      this.blacklistedRoutes.findIndex((route: string | RegExp) => {\r\n        if (typeof route === \"string\") {\r\n          const parsedRoute = parse(route, false, true);\r\n          return (\r\n            parsedRoute.hostname === requestedUrl.hostname &&\r\n            parsedRoute.path === requestedUrl.path\r\n          );\r\n        }\r\n\r\n        if (route instanceof RegExp) {\r\n          return route.test(request.url);\r\n        }\r\n\r\n        return false;\r\n      }) > -1\r\n    );\r\n  }\r\n\r\n  handleInterception(\r\n    token: string | null,\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ) {\r\n    let tokenIsExpired = false;\r\n\r\n    if (!token && this.throwNoTokenError) {\r\n      throw new Error(\"Could not get token from tokenGetter function.\");\r\n    }\r\n\r\n    if (this.skipWhenExpired) {\r\n      tokenIsExpired = token ? this.jwtHelper.isTokenExpired(token) : true;\r\n    }\r\n\r\n    if (token && tokenIsExpired && this.skipWhenExpired) {\r\n      request = request.clone();\r\n    } else if (token) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          [this.headerName]: `${this.authScheme()}${token}`,\r\n        },\r\n      });\r\n    }\r\n    return next.handle(request);\r\n  }\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    if (\r\n      !this.isWhitelistedDomain(request) ||\r\n      this.isBlacklistedRoute(request)\r\n    ) {\r\n      return next.handle(request);\r\n    }\r\n    const token = this.tokenGetter();\r\n\r\n    if (token instanceof Promise) {\r\n      return from(token).pipe(\r\n        mergeMap((asyncToken: string | null) => {\r\n          return this.handleInterception(asyncToken, request, next);\r\n        })\r\n      );\r\n    } else {\r\n      return this.handleInterception(token, request, next);\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders, Optional, SkipSelf, Provider } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport {JwtInterceptor} from './jwt.interceptor';\r\nimport {JWT_OPTIONS} from './jwtoptions.token';\r\nimport {JwtHelperService} from './jwthelper.service';\r\n\r\n\r\nexport interface JwtModuleOptions {\r\n  jwtOptionsProvider?: Provider;\r\n  config?: {\r\n    tokenGetter?: () => string | null | Promise<string | null>;\r\n    headerName?: string;\r\n    authScheme?: () => string | null | Promise<string | null>;\r\n    whitelistedDomains?: Array<string | RegExp>;\r\n    blacklistedRoutes?: Array<string | RegExp>;\r\n    throwNoTokenError?: boolean;\r\n    skipWhenExpired?: boolean;\r\n  };\r\n}\r\n\r\n@NgModule()\r\nexport class JwtModule {\r\n\r\n  constructor(@Optional() @SkipSelf() parentModule: JwtModule) {\r\n    if (parentModule) {\r\n      throw new Error('JwtModule is already loaded. It should only be imported in your application\\'s main module.');\r\n    }\r\n  }\r\n  static forRoot(options: JwtModuleOptions): ModuleWithProviders<JwtModule> {\r\n    return {\r\n      ngModule: JwtModule,\r\n      providers: [\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: JwtInterceptor,\r\n          multi: true\r\n        },\r\n        options.jwtOptionsProvider ||\r\n        {\r\n          provide: JWT_OPTIONS,\r\n          useValue: options.config\r\n        },\r\n        JwtHelperService\r\n      ]\r\n    };\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of angular-jwt\r\n */\r\n\r\nexport * from './lib/jwt.interceptor';\r\nexport * from './lib/jwthelper.service';\r\nexport * from './lib/jwtoptions.token';\r\nexport * from './lib/angular-jwt.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}